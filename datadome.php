<?php
/**
* Plugin Name: DataDome
* Plugin URI: https://datadome.co
* Description: DataDome plugin for Wordpress allows you to monitor for free your website traffic quality. 1 / Follow the evolution of traffic generated by the different types of traffic: Human, Good Bots, Bad Bots, Monetizable Bots. 2 / Observe and understand massive attacks against your website.
* Version: 2.0
* Author: DataDome
* Author URI: https://datadome.co
* License: GPL2
*/
/*
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License, version 2, as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

/**
 * @internal
 * 
 * The constants defined for the plugin
 */
define("DATADOME_PLUGIN_NAME__", "DataDome");
define("DATADOME_PLUGIN_SLUG__", "__data_dome_");
define("DATADOME_PLUGIN_VERSION__", "2.0");
define("DATADOME_DIR__", trailingslashit(plugin_dir_path(__FILE__)));
define("DATADOME_LOG_FILE__", DATADOME_DIR__ . "tmp/log.log");
define("DATADOME_PERFORMANCE_FILE__", DATADOME_DIR__ . "tmp/performance.log");
define("DATADOME_PERFORMANCE__", false);
define("DATADOME_URL__", plugin_dir_url(__FILE__));
define("DATADOME_ROOT__", trailingslashit(plugins_url("", __FILE__)));
define("DATADOME_RESOURCES__", DATADOME_ROOT__ . "resources/");
define("DATADOME_IMAGES__", DATADOME_RESOURCES__ . "images/");
define("DATADOME_DEBUG__", false);
define("DATADOME_TEST__", false);
define("DATADOME_STAGING__", false);

if (DATADOME_DEBUG__) {
    @error_reporting(E_ALL);
    @ini_set("display_errors", "1");
}

/**
 * Abort loading if WordPress is upgrading
 */
if (defined("WP_INSTALLING") && WP_INSTALLING) return;

/**
  * The main class of the plugin
  *
  */
class DataDome
{

    /**
     * @internal
     * 
     * @property string $notice WP notice that needs to be shown in the settings screen
     */
    private $notice;

    /**
     * @internal
     * 
     * @property string $error WP error that needs to be shown in the settings screen
     */
    private $error;

    /**
     * @internal
     * 
     * @property array $dataDomeResult the value of the API call to validate, which can be used by the different hooks
     */
    private $dataDomeResult;

    /**
     * @internal
     * 
     * @property int BEST_SERVER_TIMEOUT the timeout value for best server detection
     */
    const BEST_SERVER_TIMEOUT   = 1000;

    /**
     * @internal
     * 
     * @property string DASHBOARD_URL the dashboard URL to show in the menu
     */
    const DASHBOARD_URL         = "https://dashboard.datadome.co";

    /**
      * The constructor of the plugin
      *
      * @param none
      *
      * @return void
      */
    public function __construct()
    {
        register_activation_hook(__FILE__ , array($this, "data_dome_activate"));
        register_deactivation_hook(__FILE__ , array($this, "data_dome_deactivate"));

        @mkdir(DATADOME_DIR__ . "tmp");

        $this->loadHooks();
        $this->loadClasses();
    }

    /**
      * The method that loads all the WP hooks
      *
      * @param none
      *
      * @return void
      */
    private function loadHooks()
    {
        // all hooks and actions
        add_action("admin_enqueue_scripts", array($this, "data_dome_includeResources"));
        add_action("plugins_loaded", array($this, "data_dome_i18n"));
        add_action("admin_menu", array($this, "data_dome_add_menu"));
        add_action("send_headers", array($this, "data_dome_send_headers"));
        add_action("wp_footer", array($this, "data_dome_add_footer"));
        add_action("admin_notices", array($this, "data_dome_admin_notices"));

        add_filter("template_include", array($this, "data_dome_template_include"));
    }

    /**
      * The method that shows the nag message to activate an account
      *
      * @param none
      *
      * @return void
      */
    function data_dome_admin_notices()
    {
        global $pagenow;
        if ( $pagenow == 'plugins.php' ) {
            $key = self::getOption("key");
            if (empty($key)) {
                include_once DATADOME_DIR__ . "resources/admin/includes/nag.php";
            }
        }
    }

    /**
      * The method that loads all the pure PHP classes
      *
      * @param none
      *
      * @return void
      */
    private function loadClasses()
    {
        require_once DATADOME_DIR__ . "classes/Autoloader.php";
        new Autoloader();

        DataDome_Util::$debug           = DATADOME_DEBUG__;
        DataDome_Util::$debugFile       = DATADOME_LOG_FILE__;
        if (DATADOME_PERFORMANCE__) {
            DataDome_Util::$performanceLog  = DATADOME_PERFORMANCE_FILE__;
        }
    }

    /**
      * The hook that initializes the locale and is responsible for i18n
      *
      * @param none
      *
      * @return void
      */
    function data_dome_i18n()
    {
        $pluginDirName  = dirname(plugin_basename(__FILE__));
        $domain         = DATADOME_PLUGIN_SLUG__;
        $locale         = apply_filters("plugin_locale", get_locale(), $domain);
        load_textdomain($domain, WP_LANG_DIR . "/" . $pluginDirName . "/" . $domain . "-" . $locale . ".mo");
        load_plugin_textdomain($domain, "", $pluginDirName . "/resources/lang/");
    }

    /**
      * The hook that initializes the admin menu
      *
      * @param none
      *
      * @return void
      */
    function data_dome_add_menu()
    {
        add_menu_page(DATADOME_PLUGIN_NAME__, DATADOME_PLUGIN_NAME__, "manage_options", DATADOME_PLUGIN_SLUG__, array($this, "data_dome_settings"), DATADOME_IMAGES__ . "favicon.png");
        add_submenu_page(DATADOME_PLUGIN_SLUG__, DATADOME_PLUGIN_NAME__, __("Settings", DATADOME_PLUGIN_SLUG__), "manage_options", DATADOME_PLUGIN_SLUG__, array($this, "data_dome_settings"));
        add_submenu_page(DATADOME_PLUGIN_SLUG__, DATADOME_PLUGIN_NAME__, __("Dashboard", DATADOME_PLUGIN_SLUG__), "manage_options", DATADOME_PLUGIN_SLUG__ . "1", null);
    }

    /**
      * The hook that saves settings from the settings screen
      *
      * @param none
      *
      * @return void
      */
    function data_dome_settings()
    {
        if (isset($_POST["dd-submit"])) {
            $key    = self::getOption("key");
            $jskey  = self::getOption("jskey");
            if ($key && $jskey) {
                if (preg_match("/^[a-zA-Z0-9]{15}$/", $key) !== 1) {
                    $this->error    = __("Invalid license key", DATADOME_PLUGIN_SLUG__);
                    require_once DATADOME_DIR__ . "resources/admin/includes/settings.php";
                    return;
                }
                if (preg_match("/^[a-zA-Z0-9]{30}$/", $jskey) !== 1) {
                    $this->error    = __("Invalid JS key", DATADOME_PLUGIN_SLUG__);
                    require_once DATADOME_DIR__ . "resources/admin/includes/settings.php";
                    return;
                }
                self::setOption("server", @$_POST["server"]);
                self::setOption("timeout", $_POST["timeout"]);
                self::setOption("exclude", @$_POST["exclude"]);
                self::setOption("sendstats", isset($_POST["sendstats"]) ? $_POST["sendstats"] : 0);
                self::setOption("https", isset($_POST["https"]) ? $_POST["https"] : 0);
            }
            self::setOption("key", $_POST["key"]);
            self::setOption("jskey", $_POST["jskey"]);
            $this->notice   = __("Settings have been saved!", DATADOME_PLUGIN_SLUG__);
        }

        $key    = self::getOption("key");
        $jskey  = self::getOption("jskey");
        $server = self::getOption("server");

        if ($key && empty($server)) {
            // first time
            $list   = DataDome_GetServers::fetchList(self::BEST_SERVER_TIMEOUT, true, true, false);
            self::setOption("server", $list[0]["host"]);
            self::setOption("servers", $list);
        }

        if (isset($_POST["refresh"])) {
            $list   = DataDome_GetServers::fetchList(self::BEST_SERVER_TIMEOUT, true, self::getOption("sendstats") == 1, self::getOption("https") == 1);
            self::setOption("servers", $list);
            self::setOption("server", $list[0]["host"]);
            $this->notice   = __("Latency Benchmark test concluced successfully", DATADOME_PLUGIN_SLUG__);
        }

        require_once DATADOME_DIR__ . "resources/admin/includes/settings.php";
    }


    /**
      * The hook that loads the JS and CSS resources but only for the admin
      *
      * @param none
      *
      * @return void
      */
    function data_dome_includeResources()
    {
        wp_enqueue_script("jquery");
        wp_enqueue_script("dd", DATADOME_RESOURCES__ . "admin/js/data-dome.js");
        wp_localize_script("dd", "dd", array(
            "slug"      => DATADOME_PLUGIN_SLUG__,
            "dashboard" => self::DASHBOARD_URL
        ));

        wp_register_style("dd", DATADOME_RESOURCES__ . "admin/css/data-dome.css");
        wp_enqueue_style("dd");
    }

    /**
      * The hook that initiates the validation request and sends the extra headers to the client if X-DataDome-headers is returned by the API
      *
      * @param none
      *
      * @return void
      */
    function data_dome_send_headers()
    {
        $this->sendValidationRequest();
        if (
            $this->dataDomeResult && 
            $this->dataDomeResult["error"] != 500 &&
            !empty($this->dataDomeResult["headers"]) && array_key_exists("X-DataDome-headers", $this->dataDomeResult["headers"])) {
            $headerNames        = $this->dataDomeResult["headers"]["X-DataDome-headers"];
            if (!empty($headerNames)) {
                $headers        = explode(" ", $headerNames);
                foreach ($headers as $key) {
                    if (!isset($this->dataDomeResult["headers"][$key])) continue;

                    $val        = $this->dataDomeResult["headers"][$key];
                    DataDome_Util::writeDebug("data_dome_send_headers setting $key: $val");
                    header("$key: $val");
                }
            }
        }
    }

    /**
      * The hook that adds the jskey-related javascript snippet
      *
      * @param none
      *
      * @return void
      */
    function data_dome_add_footer()
    {
        $jskey  = self::getOption("jskey");
        if (empty($jskey)) return;

        echo '<script>
                  !function(a,b,c,d,e){a.ddjskey=e;var f=b.createElement(c),g=b.getElementsByTagName(c)[0];
                  f.async=1,f.src=d,g.parentNode.insertBefore(f,g)}
                  (window,document,"script","https://js.datadome.co/tags.js","' . $jskey . '");
              </script>';
    }

    /**
      * The hook that fires the validation request
      *
      * @param none
      *
      * @return void
      */
    private function sendValidationRequest()
    {
        if (!is_admin()) {
            $this->dataDomeResult = DataDome_ValidateRequest::validate(
                trailingslashit(self::getOption("server")),
                self::getOption("timeout"),
                self::getOption("key"),
                DATADOME_PLUGIN_VERSION__,
                "post, cookies",
                self::getOption("https") == 1
            );
        }
    }

    /**
      * The hook that prints the HTML response if the API response mandates it
      *
      * @param string $template the template that needs to be included
      *
      * @return string
      */
    function data_dome_template_include($template)
    {
        if ($this->dataDomeResult && $this->dataDomeResult["error"] == 403) {
            header('HTTP/1.0 403 Forbidden');
            echo $this->dataDomeResult["response"];
            exit();
        }

        return $template;
    }

    /**
      * The hook that is called once the plugin is activated
      *
      * @param none
      *
      * @return void
      */
    function data_dome_activate()
    {
        self::setOption("timeout", "150");
        self::setOption("sendstats", "1");
    }


    /****************************************** Util functions ******************************************/

    /**
      * Custom wrapper for the get_option function
      *
      * @param string $field key of the option
      * @param string $default default value of the option if the key does not exist
      *
      * @return mixed
      */
    public static function getOption($field, $default="")
    {
        $val = get_option(DATADOME_PLUGIN_SLUG__ . $field);
        return $val ? $val : $default;
    }

    /**
      * Custom wrapper for the update_option function
      *
      * @param string $field key of the option
      * @param string $value value of the option to set
      *
      * @return mixed
      */
    public static function setOption($field, $value)
    {
        return update_option(DATADOME_PLUGIN_SLUG__ . $field, $value);
    }
}

$dataDome = new DataDome();
